<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.animation/CMakeLists.txt" timestamp="1512584919648">
        <mark key="'" line="190" column="36" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/api/RendererObjectFactory.cpp" timestamp="1494605056851">
        <mark key="'" line="237" column="36" />
      </file>
      <file name="$USER_HOME$/dev/igbuild/linux/debug/proj_tmp/com.amazon.ignition.framework.network/com.amazon.ignition.framework.network/LuaFFIExport.cpp" timestamp="1512580713080">
        <mark key="'" line="91" column="72" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.report/internal/src/report/PluginReport.cpp" timestamp="1497549183510">
        <mark key="'" line="44" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/ps3/include/cppcompatibility/UniquePtr.h" timestamp="1513097482447">
        <mark key="'" line="177" column="4" />
      </file>
      <file name="$USER_HOME$/psdev/ig382build/init.js" timestamp="1510827609967">
        <mark key="'" line="83483" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/src/bindings/sm/StorageExtension.cpp" timestamp="1510922342352">
        <mark key="'" line="70" column="14" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/job/StartupJob.lua" timestamp="1512645833987">
        <mark key="'" line="5" column="36" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/Network.cpp" timestamp="1502117425936">
        <mark key="'" line="28" column="18" />
      </file>
      <file name="$USER_HOME$/dev/igbuild/linux/debug/proj_tmp/com.amazon.ignition.framework.lua/luajit/src/lauxlib.h" timestamp="1512644980582">
        <mark key="'" line="109" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/IAllocator.h" timestamp="1512051744483">
        <mark key="'" line="43" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/src/Bucket.cpp" timestamp="1510922247224">
        <mark key="'" line="18" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/availability/BaseCandidateRetriever.lua" timestamp="1512647600168">
        <mark key="'" line="7" column="32" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.deviceinfo/thirdparty/devicepropertiescomponent/amazonite/library-loader/src/ExternalContextFactory.cpp" timestamp="1501251380525">
        <mark key="'" line="245" column="39" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.core/internal/platform/android/src/SystemInit.cpp" timestamp="1516102548337">
        <mark key="'" line="130" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/src/scene/SceneLifecycleManager.cpp" timestamp="1512057545856">
        <mark key="'" line="76" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/PoolAllocatorAdapter.h" timestamp="1512128213169">
        <mark key="'" line="23" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/src/backends/SecureStorageBackend.cpp" timestamp="1511544158816">
        <mark key="'" line="164" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/src/api/GLES2FrameBufferObject.cpp" timestamp="1494604554298">
        <mark key="'" line="69" column="77" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/tests/TextToSpeechTest.cpp" timestamp="1493982507515">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/include/api/Texture.h" timestamp="1512643575205">
        <mark key="'" line="64" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/include/av_display.h" timestamp="1493734469271">
        <mark key="'" line="82" column="13" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.player/internal/platform/android/src/player/PlayerPlatformFactory.cpp" timestamp="1502117932596">
        <mark key="'" line="10" column="30" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/linux/src/filesystem/FileSystemFacade.cpp" timestamp="1511279881495">
        <mark key="'" line="23" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.display/internal/src/display/DevicePlatformContext.cpp" timestamp="1512488088863">
        <mark key="'" line="49" column="10" />
      </file>
      <file name="$USER_HOME$/dev/ig/samsung-ignition/com.amazon.ignition.framework.deviceinfo/internal/platform/samsungtv/src/deviceinfo/properties/SamsungTVDevicePropertiesProvider.cpp" timestamp="1499794013967">
        <mark key="'" line="95" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/src/bindings/sm/InputExtension.cpp" timestamp="1497959148658">
        <mark key="'" line="173" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/errors/CrashDataCollector.cpp" timestamp="1513014044487">
        <mark key="'" line="55" column="25" />
      </file>
      <file name="/usr/include/curl/easy.h" timestamp="1510243231373">
        <mark key="'" line="29" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.animation/include/bindings/lua/InterpolatorLuaBinding.h" timestamp="1512643159460">
        <mark key="'" line="9" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/cmakescripts/build/backend.cmake" timestamp="1497605724960">
        <mark key="'" line="5" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/utils/TaggedBuffer.h" timestamp="1512050850449">
        <mark key="'" line="16" column="50" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/bindings/sm/ManagerEventsExtension.cpp" timestamp="1513696719118">
        <mark key="'" line="58" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/include/backends/SecureStorageBackend.h" timestamp="1511277827809">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/errors/CrashDataCollector.h" timestamp="1513013425170">
        <mark key="'" line="32" column="14" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/include/deviceinfo/utils/ThreadSafeInitialiser.h" timestamp="1502723863814">
        <mark key="'" line="18" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.renderer/internal/platform/android/cmakescripts/build.cmake" timestamp="1498065989182">
        <mark key="'" line="0" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicerpi/implementation/linux/src/avDisplay.cpp" timestamp="1504720197545">
        <mark key="'" line="163" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/src/Input.cpp" timestamp="1512655917550">
        <mark key="'" line="138" column="22" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.display/internal/src/PluginDisplay.cpp" timestamp="1501076700002">
        <mark key="'" line="99" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/http/HttpResponse.cpp" timestamp="1513091676450">
        <mark key="'" line="87" column="51" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/include/utils/ForwardDeclarations.h" timestamp="1494605318859">
        <mark key="'" line="38" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/include/util/KeyRepeatManager.h" timestamp="1497959885619">
        <mark key="'" line="116" column="15" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/availability/UpdateChecker.lua" timestamp="1512647930102">
        <mark key="'" line="16" column="59" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/include/api/GLES2Api.h" timestamp="1507112717072">
        <mark key="'" line="352" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/allocator/ChunkAllocator.cpp" timestamp="1513009064552">
        <mark key="'" line="31" column="7" />
      </file>
      <file name="/GlyphAtlas.cpp" timestamp="1512049013089">
        <mark key="'" line="51" column="12" />
      </file>
      <file name="$USER_HOME$/local/depo/src/depo/config.py" timestamp="1495212797707">
        <mark key="'" line="51" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.display/internal/platform/device/src/display/DevicePlatformContext.cpp" timestamp="1495465446468">
        <mark key="'" line="152" column="40" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/megablast_native_apis.cpp" timestamp="1516712883089">
        <mark key="'" line="538" column="53" />
        <mark key="[" line="625" column="5" />
        <mark key="]" line="625" column="4" />
        <mark key="^" line="625" column="4" />
        <mark key="." line="625" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/src/SDLCommonContext.cpp" timestamp="1493982740057">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/igbuild/linux/debug/amazonite/linux/platform/device-properties/implementation/devicepropertiesprovider/src/PlatformDevicePropertiesProvider.cpp" timestamp="1499795243833">
        <mark key="'" line="425" column="70" />
      </file>
      <file name="$USER_HOME$/dev/raspberry-pi-tools/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/arm-bcm2708hardfp-linux-gnueabi/include/c++/4.7.1/bits/stl_queue.h" timestamp="1503415803655">
        <mark key="'" line="160" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/HeapAllocatorMultiPoolFrontEnd.h" timestamp="1512127942344">
        <mark key="'" line="22" column="38" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" timestamp="1518445361804">
        <mark key="'" line="333" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/libcurl.cmake" timestamp="1515152273694">
        <mark key="'" line="171" column="6" />
      </file>
      <file name="$USER_HOME$/dev/iglg/lg-ignition/lg/com.amazon.ignition.framework.network/internal/platform/lg/src/PlatformUtils.cpp" timestamp="1499444056666">
        <mark key="'" line="118" column="24" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.font/src/font/GlyphAtlas.cpp" timestamp="1512049093623">
        <mark key="'" line="141" column="29" />
      </file>
      <file name="/usr/include/c++/4.9/bits/basic_string.h" timestamp="1511962081025">
        <mark key="'" line="440" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/include/SecureStorage.h" timestamp="1511963103524">
        <mark key="'" line="9" column="0" />
      </file>
      <file name="$USER_HOME$/dev/portingkitreleasetools/tools/release/export_clean/src/filesystem/cleaner/FileSystemCleaner.py" timestamp="1495201610283">
        <mark key="'" line="50" column="17" />
      </file>
      <file name="$USER_HOME$/dev/iglg/devicelg/implementation/lg/internal/src/SDLDisplayContext.cpp" timestamp="1501077304523">
        <mark key="'" line="324" column="24" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.texttospeech/device/tests/TextToSpeechTest.cpp" timestamp="1499949294890">
        <mark key="'" line="75" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/src/sm/extensions/CommandLineArgsExtension.cpp" timestamp="1494321323849">
        <mark key="'" line="40" column="68" />
      </file>
      <file name="$USER_HOME$/dev/iglg/lg-ignition/lg/com.amazon.ignition.framework.core/internal/platform/lg/src/luna/NativeAppHandler.cpp" timestamp="1501005775169">
        <mark key="'" line="95" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/config.js" timestamp="1513098766325">
        <mark key="'" line="109" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/cppcompatibility/std/UniquePtr.h" timestamp="1513097495616">
        <mark key="'" line="15" column="34" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/null/include/display/NullDisplayContext.h" timestamp="1499792355733">
        <mark key="'" line="18" column="34" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.player/internal/platform/android/include/player/AndroidPlayerPlatform.h" timestamp="1502118076013">
        <mark key="'" line="15" column="42" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/http/data/FileHttpResponseConsumer.cpp" timestamp="1513092251238">
        <mark key="'" line="40" column="26" />
      </file>
      <file name="$USER_HOME$/dev/igbuild/linux/debug/proj_tmp/com.amazon.ignition.framework.animation/src/bindings/sm/generated/AnimationExtensionClassBinding.cpp" timestamp="1497535604119">
        <mark key="'" line="44" column="43" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.devicelayerloader/cmakescripts/config/devicelayer.cmake" timestamp="1510927825049">
        <mark key="'" line="2" column="8" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.renderer/internal/backend/gles2/include/api/GLES2Api.h" timestamp="1499435369100">
        <mark key="'" line="376" column="38" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.focus.logic/scripts/lua/FocusApi.lua" timestamp="1512580276749">
        <mark key="'" line="16" column="20" />
      </file>
      <file name="$USER_HOME$/dev/ci/patches/ignition.local" timestamp="1499162175051">
        <mark key="'" line="44" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/package/PackageInstallerFactory.cpp" timestamp="1512648464854">
        <mark key="'" line="33" column="57" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.devicelayerloader/device-layer-skeleton/interface/include/device/av_display_defs.h" timestamp="1505127084189">
        <mark key="'" line="61" column="2" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/ConfigurationManager.cpp" timestamp="1517247698198">
        <mark key="'" line="92" column="20" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/linux/assets/launch" timestamp="1494407539106">
        <mark key="'" line="9" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/test/CMakeLists.txt" timestamp="1512135283358">
        <mark key="'" line="35" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/lib/curl_setup.h" timestamp="1515152800959">
        <mark key="'" line="55" column="1" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/IgnitionHostMessage.cpp" timestamp="1511776210608">
        <mark key="'" line="3" column="14" />
      </file>
      <file name="$USER_HOME$/dev/iglg/devicelg/implementation/lg/internal/src/deviceLuna/LGMediaLSCall.cpp" timestamp="1499190031788">
        <mark key="'" line="194" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/interface/include/device/av_input_defs.h" timestamp="1495626114088">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/src/SDLDisplayContext.cpp" timestamp="1512045845050">
        <mark key="'" line="242" column="12" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicerpi/implementation/rpi/CMakeLists.txt" timestamp="1512135951587">
        <mark key="[" line="23" column="0" />
        <mark key="]" line="23" column="42" />
        <mark key="." line="23" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/DuktapePolyfills.js" timestamp="1518444434018">
        <mark key="'" line="58" column="20" />
        <mark key="[" line="58" column="15" />
        <mark key="]" line="26" column="19" />
        <mark key="." line="58" column="19" />
        <mark key="^" line="26" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/include/LegacySecureStorage.h" timestamp="1512134549269">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="/usr/include/c++/4.9/functional" timestamp="1511178079009">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/igbuild/linux/relwithdebinfo/CMakeCache.txt" timestamp="1512046951790">
        <mark key="'" line="36" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/include/SDLCommonContext.h" timestamp="1493982759051">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.player/internal/src/videoPlayer/player/amp/PlayerPlatform.cpp" timestamp="1503659122474">
        <mark key="'" line="198" column="21" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/devicerpi/implementation/rpi/src/avSecureStorageBackend.cpp" timestamp="1498736188272">
        <mark key="'" line="38" column="25" />
      </file>
      <file name="$USER_HOME$/dev/igbuildlg/lg/release/amazonite/lg/platform/device-properties/adaptor/devicepropertiesprovider/include/PropertyEntry.h" timestamp="1501251681101">
        <mark key="'" line="39" column="58" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.core/internal/platform/android/cmakescripts/build.cmake" timestamp="1497263936870">
        <mark key="'" line="63" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/src/deviceinfo/identity/GeneratedSerialNumberProvider.cpp" timestamp="1502722872589">
        <mark key="'" line="13" column="14" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.report/tests/report/listeners/LogListenerTest.cpp" timestamp="1497549176982">
        <mark key="'" line="130" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/package/PackageExpander.cpp" timestamp="1512649116679">
        <mark key="'" line="57" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/include/curl/system.h" timestamp="1515159948670">
        <mark key="[" line="436" column="0" />
        <mark key="]" line="436" column="40" />
        <mark key="." line="436" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1518445349245">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/porting/linux/SDLRenderBackend.cpp" timestamp="1510306611131">
        <mark key="'" line="213" column="61" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.core/internal/platform/android/mainlib/src/main.cpp" timestamp="1502116323049">
        <mark key="'" line="25" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.display/internal/platform/linux/src/egl/LinuxPlatformContext.cpp" timestamp="1510240820808">
        <mark key="'" line="215" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.font/thirdparty/icu/source/common/unicode/unistr.h" timestamp="1497968563924">
        <mark key="'" line="34" column="0" />
      </file>
      <file name="/usr/include/c++/4.9/bits/unique_ptr.h" timestamp="1513100943345">
        <mark key="'" line="231" column="6" />
      </file>
      <file name="$USER_HOME$/opt/cross/lg/M16p/usr/include/luna-service2/lunaservice.h" timestamp="1499450799538">
        <mark key="'" line="359" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/samsung-ignition/com.amazon.ignition.framework.core/internal/platform/samsungtv/src/plugin/PluginPathPlatform.cpp" timestamp="1497621666727">
        <mark key="'" line="28" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/tests/errors/CrashDataCollectorCrashDataMapTest.cpp" timestamp="1513014831013">
        <mark key="'" line="164" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/allocator/HighFilterAllocator.cpp" timestamp="1512051919795">
        <mark key="'" line="15" column="15" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/tests/lib/gmock/include/gmock/gmock-matchers.h" timestamp="1498663905923">
        <mark key="'" line="2409" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/src/scene/bindings/lua/LuaSceneBinding.cpp" timestamp="1509109379266">
        <mark key="'" line="157" column="20" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/bindings/lua/ffi/HttpRequestSharedPtrLuaBinding.cpp" timestamp="1512580624413">
        <mark key="'" line="176" column="36" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/include/api/RendererObjectFactory.h" timestamp="1494605317227">
        <mark key="'" line="62" column="12" />
      </file>
      <file name="$USER_HOME$/dev/ci/deliver/deliver.cmake" timestamp="1499161901044">
        <mark key="'" line="8" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/CommandBuffer.h" timestamp="1510243688832">
        <mark key="'" line="103" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/cmakescripts/get-plugin-platform-dir.cmake" timestamp="1496761900229">
        <mark key="'" line="17" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ci/prepare-source/ignition.cmake" timestamp="1499159974188">
        <mark key="'" line="22" column="47" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/src/SDLInputContext.cpp" timestamp="1512132530056">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/PluginOTA.cpp" timestamp="1513696793766">
        <mark key="'" line="77" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/linux/src/plugin/PluginPathPlatform.cpp" timestamp="1497612368796">
        <mark key="'" line="60" column="29" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.deviceinfo/thirdparty/devicepropertiescomponent/amazonite/config.cmake" timestamp="1499346509348">
        <mark key="'" line="55" column="40" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/allocator/HighFilterAllocator.h" timestamp="1512051934908">
        <mark key="'" line="37" column="13" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" timestamp="1518450726932">
        <mark key="'" line="23053" column="63" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="52142" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/MultiPoolAllocator.h" timestamp="1512128209658">
        <mark key="'" line="183" column="36" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/job/InstallPackagesJob.lua" timestamp="1512648399878">
        <mark key="'" line="87" column="14" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/ps4/src/plugin/PluginPathPlatform.cpp" timestamp="1502270361957">
        <mark key="'" line="39" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelayerskeleton/include_files.txt" timestamp="1496226740853">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/lg-ignition/lg/com.amazon.ignition.framework.display/internal/platform/lg/src/sdl/LGPlatformContext.cpp" timestamp="1496160450345">
        <mark key="'" line="23" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/errors/Errors.cpp" timestamp="1513013587770">
        <mark key="'" line="594" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/src/avDisplay.cpp" timestamp="1513703088756">
        <mark key="'" line="80" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/external/include/deviceinfo/bindings/sm/DeviceInfoExtension.h" timestamp="1499792496661">
        <mark key="'" line="60" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/Manager.lua" timestamp="1512645531443">
        <mark key="'" line="3" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ignite/TextTest/index.embedded.js" timestamp="1518451153727">
        <mark key="'" line="8" column="24" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="8" column="57" />
        <mark key="." line="6" column="49" />
        <mark key="^" line="6" column="49" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/external/include/ota/package/PayloadMetadata.h" timestamp="1512650413971">
        <mark key="'" line="26" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/renderer/SceneGraphRenderer.cpp" timestamp="1499884944544">
        <mark key="'" line="1502" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-panda/com.amazon.ignition.framework.input/internal/platform/panda/src/PlatformRemoteDelegate.cpp" timestamp="1497959632664">
        <mark key="'" line="74" column="27" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.lua/scripts/lua/commandLine/commandLine.lua" timestamp="1512580388109">
        <mark key="'" line="34" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/src/sm/SpiderMonkeyEnvironment.cpp" timestamp="1512062086466">
        <mark key="'" line="757" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ig/install/plugins/com.amazon.ignition.app.stark/static/1.4.3/scripts/config.js" timestamp="1513095940431">
        <mark key="'" line="11" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/allocator/TagAllocator.cpp" timestamp="1512051237594">
        <mark key="'" line="144" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/fetchIndexJs.js" timestamp="1513098926963">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/utils/RendererInputEventDelegate.cpp" timestamp="1517579591544">
        <mark key="'" line="298" column="24" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.lua/CMakeLists.txt" timestamp="1502115878109">
        <mark key="'" line="30" column="45" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/Memory.cpp" timestamp="1512051335104">
        <mark key="'" line="63" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/cmakescripts/build.cmake" timestamp="1497605980688">
        <mark key="'" line="203" column="12" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/src/deviceinfo/properties/AbstractDeviceProperties.cpp" timestamp="1511782746358">
        <mark key="'" line="45" column="32" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/allocator/MallocAllocator.cpp" timestamp="1513076227168">
        <mark key="'" line="76" column="18" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.javascript/tests/CMakeLists.txt" timestamp="1499182336068">
        <mark key="'" line="331" column="0" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.scene/include/IScene.h" timestamp="1501062696746">
        <mark key="'" line="42" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ci/common/deliveries.cmake" timestamp="1499161998475">
        <mark key="'" line="61" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/lg-ignition/lg/com.amazon.ignition.framework.network/internal/platform/lg/src/PlatformUtils.cpp" timestamp="1495799385313">
        <mark key="'" line="72" column="35" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/connectivityErrorMessage.js" timestamp="1513091126818">
        <mark key="'" line="144" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.font/include/font/utils/ParseState.h" timestamp="1502981865728">
        <mark key="'" line="12" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicerpi/implementation/rpi/internal/src/EGLUtils.cpp" timestamp="1510240826359">
        <mark key="'" line="117" column="41" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.deviceinfo/CMakeLists.txt" timestamp="1499358682223">
        <mark key="'" line="37" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/plugin/PluginManifest.cpp" timestamp="1497611971145">
        <mark key="'" line="439" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/ScopedAllocator.cpp" timestamp="1512051583416">
        <mark key="'" line="14" column="25" />
      </file>
      <file name="$USER_HOME$/dev/portingkitreleasetools/tools/release/export_clean/src/ignition/filesystem/cleaner/ArgumentParser.py" timestamp="1495201457105">
        <mark key="'" line="28" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelayerskeleton/tests/test_files.txt" timestamp="1496226749285">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ci/JSONParser.cmake" timestamp="1499159771026">
        <mark key="'" line="113" column="33" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/CMakeListsThirdparty.txt" timestamp="1512052574743">
        <mark key="'" line="194" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/script_engine.h" timestamp="1517312477085">
        <mark key="[" line="88" column="0" />
        <mark key="]" line="89" column="31" />
        <mark key="." line="89" column="31" />
        <mark key="^" line="89" column="31" />
      </file>
      <file name="$USER_HOME$/dev/ig/lg-ignition/lg/com.amazon.ignition.framework.core/internal/platform/lg/src/luna/SystemSettingUtils.cpp" timestamp="1495733524774">
        <mark key="'" line="105" column="5" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelayerskeleton/tests/DisplayTests.cpp" timestamp="1496410086413">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/src/tool_paramhlp.c" timestamp="1515160595642">
        <mark key="[" line="404" column="0" />
        <mark key="]" line="404" column="0" />
        <mark key="." line="404" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/include/api/RenderStateManager.h" timestamp="1499949585650">
        <mark key="'" line="68" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/PoolAllocator.cpp" timestamp="1512128150110">
        <mark key="'" line="88" column="30" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicerpi/tests/SecureStorageBackendTest.cpp" timestamp="1512136033775">
        <mark key="'" line="35" column="36" />
      </file>
      <file name="$USER_HOME$/dev/ig/lg-ignition/lg/com.amazon.ignition.framework.storage/internal/platform/lg/src/backends/SecureStorageBackend.cpp" timestamp="1511539450142">
        <mark key="'" line="35" column="50" />
      </file>
      <file name="/usr/include/c++/4.9/unordered_set" timestamp="1494596511559">
        <mark key="'" line="55" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/src/deviceinfo/properties/DevicePropertiesDelegate.cpp" timestamp="1502462593025">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/lua_engine.h" timestamp="1517251816836">
        <mark key="[" line="23" column="0" />
        <mark key="]" line="23" column="5" />
        <mark key="." line="23" column="5" />
        <mark key="^" line="23" column="5" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/include/util/AVPKTestInputEmitter.h" timestamp="1511188853888">
        <mark key="'" line="19" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/plugin/PluginPath.h" timestamp="1513185226469">
        <mark key="'" line="53" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/lib/mime.c" timestamp="1515084197902">
        <mark key="[" line="46" column="0" />
        <mark key="]" line="46" column="0" />
        <mark key="." line="46" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/internal/src/videoPlayer/PlayerPlatformFactory.cpp" timestamp="1512053004470">
        <mark key="'" line="12" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/cmakescripts/create-monolith.cmake" timestamp="1494411486915">
        <mark key="'" line="117" column="10" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/plugin/LifecycleState.h" timestamp="1497625434427">
        <mark key="'" line="107" column="15" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/include/utils/RendererObjectScope.h" timestamp="1494604594673">
        <mark key="'" line="20" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ignite/tests/CMakeLists.txt" timestamp="1516878138149">
        <mark key="'" line="87" column="60" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.devicelayerloader/CMakeLists.txt" timestamp="1510927834413">
        <mark key="'" line="100" column="55" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/plugin/path/TemplatedPluginPathBuilder.h" timestamp="1496317518515">
        <mark key="'" line="28" column="52" />
      </file>
      <file name="$USER_HOME$/local/depo/src/depo/versioning/IgnitionVersioningStrategy.py" timestamp="1495208794282">
        <mark key="'" line="12" column="37" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/src/scene/image/ScopedImageHandle.cpp" timestamp="1512057624240">
        <mark key="'" line="152" column="20" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.player/internal/platform/android/src/player/AndroidPlayerPlatform.cpp" timestamp="1502118068355">
        <mark key="'" line="48" column="13" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/lib/strtoofft.h" timestamp="1515160503282">
        <mark key="[" line="43" column="0" />
        <mark key="]" line="43" column="0" />
        <mark key="." line="43" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/lib/strtoofft.c" timestamp="1515160454874">
        <mark key="[" line="36" column="0" />
        <mark key="]" line="36" column="0" />
        <mark key="." line="36" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/interface/include/device/av_display.h" timestamp="1498747160839">
        <mark key="'" line="101" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/include/PluginRenderer.h" timestamp="1512643284812">
        <mark key="'" line="202" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.deviceinfo/internal/platform/android/src/deviceinfo/properties/AndroidDeviceProperties.cpp" timestamp="1499793478666">
        <mark key="'" line="112" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/include/api/GLES2FrameBufferObject.h" timestamp="1494603590831">
        <mark key="'" line="23" column="4" />
      </file>
      <file name="$USER_HOME$/dev/igbuildlg/lg/debug/amazonite/lg/platform/device-properties/implementation/devicepropertiesprovider/include/PlatformDevicePropertiesProvider.h" timestamp="1501251767245">
        <mark key="'" line="422" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/function_binders.h" timestamp="1518175970090">
        <mark key="'" line="369" column="25" />
        <mark key="]" line="278" column="2" />
        <mark key="^" line="278" column="2" />
        <mark key="." line="278" column="2" />
      </file>
      <file name="$USER_HOME$/dev/igbuild/linux/debug/graph/cmake.ignition" timestamp="1494411013130">
        <mark key="'" line="468" column="5" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/utils/bits/FileSystemFlipBit.cpp" timestamp="1513357162855">
        <mark key="[" line="58" column="49" />
        <mark key="]" line="58" column="50" />
        <mark key="." line="58" column="50" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/src/backends/DeviceSecureStorageBackend.cpp" timestamp="1512134972837">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/internal/src/videoPlayer/player/amp/PlayerPlatform.cpp" timestamp="1502118148994">
        <mark key="'" line="337" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/tests/plugin/DependencyGraphTest.cpp" timestamp="1497612014990">
        <mark key="'" line="31" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/tests/scene/utils/nodepropertyappliers/EffectUtilsTest.cpp" timestamp="1513942352695">
        <mark key="'" line="20" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ignite/docs/CHANGES" timestamp="1516384514095">
        <mark key="'" line="163" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/stateManager.js" timestamp="1513098959370">
        <mark key="'" line="10" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/script_engine_config.h" timestamp="1517246543115">
        <mark key="'" line="35" column="15" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/Render.h" timestamp="1510243481406">
        <mark key="'" line="78" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ci/commitment/common-commit-message.cmake" timestamp="1499162305205">
        <mark key="'" line="13" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/event/EventService.cpp" timestamp="1497440331129">
        <mark key="'" line="80" column="17" />
      </file>
      <file name="$USER_HOME$/dev/igbuildlg/lg/debug/amazonite/lg/platform/device-properties/implementation/devicepropertiesprovider/src/PlatformDevicePropertiesProvider.cpp" timestamp="1501251764629">
        <mark key="'" line="147" column="27" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/interface/include/device/av_secure_storage_backend.h" timestamp="1495626110265">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.display/internal/src/PluginDisplay.cpp" timestamp="1512655881927">
        <mark key="'" line="222" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/platform/sx6/cmakescripts/build.cmake" timestamp="1498065986571">
        <mark key="'" line="4" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/include/display/GLES2DisplayContext.h" timestamp="1499791779460">
        <mark key="'" line="18" column="35" />
      </file>
      <file name="$USER_HOME$/dev/ignite/docs/adr/0001-record-architecture-decisions.md" timestamp="1516988219554">
        <mark key="[" line="34" column="51" />
        <mark key="]" line="34" column="51" />
        <mark key="." line="34" column="51" />
        <mark key="^" line="34" column="51" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-panda/com.amazon.ignition.framework.storage/internal/platform/panda/src/backends/SecureStorageBackend.cpp" timestamp="1511539370038">
        <mark key="'" line="55" column="47" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/index.embedded.js" timestamp="1518191221038">
        <mark key="[" line="0" column="50" />
        <mark key="]" line="1" column="34" />
        <mark key="." line="1" column="34" />
        <mark key="^" line="1" column="34" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/src/api/GLES2RendererPlatformStats.cpp" timestamp="1504699313200">
        <mark key="'" line="245" column="50" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.deviceinfo/thirdparty/devicepropertiesprovider/device-properties/adaptor/devicepropertiesprovider/src/DevicePropertiesProviderAdapter.cpp" timestamp="1501251632397">
        <mark key="'" line="23" column="34" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.font/src/font/utils/ParagraphDefinition.cpp" timestamp="1512048385466">
        <mark key="'" line="325" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/external/include/websockets/WebSocketDelegate.h" timestamp="1517569908310">
        <mark key="'" line="53" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/include/ota/bindings/lua/ffi/PackageInstallerFactoryLuaBinding.h" timestamp="1512648444375">
        <mark key="'" line="26" column="41" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/event/events/LifecycleEvent.h" timestamp="1497629640221">
        <mark key="'" line="38" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/external/include/ota/package/PackageInstaller.h" timestamp="1512648473582">
        <mark key="'" line="80" column="14" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/internal/platform/ps3/src/player/PlayerPlatform.cpp" timestamp="1512053222820">
        <mark key="'" line="78" column="46" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/http/client/CurlHttpClient.cpp" timestamp="1513094718385">
        <mark key="'" line="101" column="4" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.display/internal/platform/linux/src/sdl/SDLPlatformContext.cpp" timestamp="1499197545605">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.display/internal/include/display/DevicePlatformContext.h" timestamp="1499194857354">
        <mark key="'" line="67" column="19" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.core/tools/MonolithDependencyGenerator.py" timestamp="1503663233092">
        <mark key="'" line="152" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/start.js" timestamp="1513089852592">
        <mark key="'" line="24" column="65" />
      </file>
      <file name="$USER_HOME$/dev/ignite/libs/lua/src/lua.h" timestamp="1510243400045">
        <mark key="'" line="340" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/include/sm/SpiderMonkeyEnvironment.h" timestamp="1512062168120">
        <mark key="'" line="68" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/porting/linux/SDLWrapper.cpp" timestamp="1516712984626">
        <mark key="'" line="39" column="30" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.lua/tests/ffi/LuaFFILibWrapperTest.cpp" timestamp="1493402549290">
        <mark key="'" line="49" column="6" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.display/internal/include/display/DisplayDeviceLayerData.h" timestamp="1501077212563">
        <mark key="'" line="18" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicerpi/implementation/rpi/internal/src/EGLDisplayContext.cpp" timestamp="1498746905348">
        <mark key="'" line="75" column="24" />
      </file>
      <file name="$USER_HOME$/dev/portingkitreleasetools/tools/release/export_clean/src/filesystem/cleaner/SanityChecklistChecker.py" timestamp="1495201580315">
        <mark key="'" line="111" column="20" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/ps3/include/allocation/HeapAllocatorMatHeapDecorator.h" timestamp="1512127576896">
        <mark key="'" line="41" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/utils/SplashScreenManager.cpp" timestamp="1515080962636">
        <mark key="'" line="38" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/allocator/TagAllocator.h" timestamp="1512051435682">
        <mark key="'" line="40" column="12" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.renderer/internal/backend/gles2/src/api/GLES2RendererPlatformStats.cpp" timestamp="1499434875157">
        <mark key="'" line="241" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/interface/include/device/av_text_to_speech.h" timestamp="1496226602485">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/igbuildlg/lg/release/amazonite/lg/platform/device-properties/CMakeLists.txt" timestamp="1499345611968">
        <mark key="'" line="12" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/thirdparty/spidermonkey/mozjs-45.0.2/dist/include/js/Value.h" timestamp="1494414600151">
        <mark key="'" line="1195" column="31" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/internal/platform/ps3/src/player/AmpConfig.cpp" timestamp="1512050308198">
        <mark key="'" line="57" column="30" />
      </file>
      <file name="$USER_HOME$/dev/ignite/TextTest/App.js" timestamp="1518450834477">
        <mark key="'" line="1" column="9" />
        <mark key="[" line="12" column="0" />
        <mark key="]" line="12" column="0" />
        <mark key="." line="12" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ci/prepare-source/common.cmake" timestamp="1499159670257">
        <mark key="'" line="10" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/include/events/KeyInputEvent.h" timestamp="1517578327661">
        <mark key="'" line="51" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelg/implementation/lg/internal/src/SDLInputContext.cpp" timestamp="1502462612770">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/configure.ac" timestamp="1515159267387">
        <mark key="[" line="186" column="0" />
        <mark key="]" line="188" column="0" />
        <mark key="." line="186" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/device/tests/SecureStorageBackendTest.cpp" timestamp="1512135431758">
        <mark key="'" line="112" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/CMakeLists.txt" timestamp="1512052442645">
        <mark key="'" line="124" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelayerskeleton/tests/CMakeLists.txt" timestamp="1496410095493">
        <mark key="'" line="44" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/src/scene/nodes/SceneNode.cpp" timestamp="1506332108199">
        <mark key="'" line="98" column="0" />
      </file>
      <file name="$USER_HOME$/local/depo/src/depo.py" timestamp="1494950515264">
        <mark key="'" line="16" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicerpi/interface/include/device/av_secure_storage_migration_from_v0.h" timestamp="1512558550224">
        <mark key="'" line="52" column="33" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/src/LegacySecureStorage.cpp" timestamp="1512136101912">
        <mark key="'" line="41" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/UIManager.js" timestamp="1518443083563">
        <mark key="'" line="81" column="34" />
        <mark key="[" line="54" column="126" />
        <mark key="]" line="54" column="127" />
        <mark key="." line="54" column="127" />
        <mark key="^" line="54" column="127" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/tests/test_files.txt" timestamp="1493982510659">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/external/include/http/data/FileHttpResponseConsumer.h" timestamp="1513092083134">
        <mark key="'" line="26" column="43" />
      </file>
      <file name="$USER_HOME$/dev/ignite/cmake-build-debug/CMakeCache.txt" timestamp="1516384689680">
        <mark key="'" line="34" column="37" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/src/scene/nodes/ImageNode.cpp" timestamp="1512057602500">
        <mark key="'" line="251" column="12" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/MemoryPool.cpp" timestamp="1512051363804">
        <mark key="'" line="104" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.report/internal/src/report/listeners/LogListener.cpp" timestamp="1497549186902">
        <mark key="'" line="315" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/src/scene/image/ImageRegistry.cpp" timestamp="1512058127120">
        <mark key="'" line="411" column="20" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/com.amazon.ignition.framework.core/internal/platform/ps4/src/SystemInit.cpp" timestamp="1503482736546">
        <mark key="'" line="261" column="32" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/thirdparty/SDL2/cmake/sdlchecks.cmake" timestamp="1497022769343">
        <mark key="'" line="338" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/include/scene/image/ScopedImageHandle.h" timestamp="1512057608452">
        <mark key="'" line="23" column="27" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/thirdparty/devicepropertiescomponent/amazonite/common/platform/posix-gnuc/include/amazonite/PodTypes.h" timestamp="1501253604431">
        <mark key="'" line="18" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/renderer/RendererNodeGenerator.cpp" timestamp="1509106820745">
        <mark key="'" line="37" column="36" />
      </file>
      <file name="$USER_HOME$/dev/portingkitreleasetools/tools/release/export_clean/src/ignition_export_clean.py" timestamp="1495201490578">
        <mark key="'" line="39" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/tick/TickGenerator.cpp" timestamp="1510939743273">
        <mark key="'" line="44" column="48" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelayerskeleton/CMakeLists.txt" timestamp="1496226746053">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/errors/ICrashDataCollector.h" timestamp="1513013741523">
        <mark key="'" line="24" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/src/scene/utils/SceneUpdateThread.cpp" timestamp="1497959164402">
        <mark key="'" line="74" column="44" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/main.cpp" timestamp="1516101668943">
        <mark key="'" line="44" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/Ignition.cpp" timestamp="1511443510827">
        <mark key="'" line="550" column="18" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/devicerpi/implementation/rpi/internal/include/DisplayContext.h" timestamp="1498671472605">
        <mark key="'" line="31" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/plugin/version/VersionTable.cpp" timestamp="1513357288954">
        <mark key="'" line="118" column="35" />
      </file>
      <file name="$USER_HOME$/local/depo/tests/depo/git/test_GitRepo.py" timestamp="1495212903973">
        <mark key="'" line="40" column="34" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/Logger.h" timestamp="1516712337536">
        <mark key="'" line="13" column="33" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/lib/config-linux.h" timestamp="1515152145927">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/src/SecureStorageBackendContext.cpp" timestamp="1511545303051">
        <mark key="'" line="53" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/src/delegates/DeviceDelegate.cpp" timestamp="1505134653579">
        <mark key="'" line="210" column="50" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/external/include/bindings/sm/HttpRequestFactoryExtension.h" timestamp="1513091636562">
        <mark key="'" line="22" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/ignition-android/ignition/src/main/java/com/amazon/ignition/IgnitionActivity.java" timestamp="1502117309213">
        <mark key="'" line="57" column="47" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/devicerpi/tests/SecureStorageBackendTest.cpp" timestamp="1498669631906">
        <mark key="'" line="15" column="38" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/include/deviceinfo/PluginDeviceInfo.h" timestamp="1502285646175">
        <mark key="'" line="27" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ignite/portingplatforms/linux/cmake/platform-config.cmake" timestamp="1509725255386">
        <mark key="'" line="4" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.display/cmakescripts/build/platformcontext.cmake" timestamp="1495460067621">
        <mark key="'" line="5" column="77" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/include/sm/IBindable.h" timestamp="1497355949826">
        <mark key="'" line="19" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ignite/TextTest/dist/TextTest.js" timestamp="1518439800046">
        <mark key="'" line="52457" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/NativeModuleProxy.js" timestamp="1518176730435">
        <mark key="'" line="4" column="4" />
        <mark key="[" line="30" column="2" />
        <mark key="]" line="31" column="44" />
        <mark key="^" line="31" column="44" />
        <mark key="." line="31" column="44" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/src/deviceinfo/bindings/sm/DeviceInfoExtension.cpp" timestamp="1499792491045">
        <mark key="'" line="24" column="16" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.renderer/internal/src/renderer/OffScreenSceneGraphManager.cpp" timestamp="1501062737210">
        <mark key="'" line="90" column="48" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/include/scene/nodes/ImageNode.h" timestamp="1512057588261">
        <mark key="'" line="117" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/tests/CMakeLists.txt" timestamp="1494499436457">
        <mark key="'" line="338" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.display/internal/platform/ps4/src/egl/PS4PlatformContext.cpp" timestamp="1511525779989">
        <mark key="'" line="41" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/thirdparty/fruit/configuration/CMakeLists.txt" timestamp="1494597569682">
        <mark key="'" line="48" column="15" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/utils/RendererObjectScope.cpp" timestamp="1494604082073">
        <mark key="'" line="19" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/http/cache/CacheServiceHttpCacheProvider.cpp" timestamp="1512050768326">
        <mark key="'" line="34" column="34" />
      </file>
      <file name="$USER_HOME$/dev/ci/doxygen/doxygen.cmake" timestamp="1499162535044">
        <mark key="'" line="142" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/include/sm/SpiderMonkeyDefs.h" timestamp="1512061939430">
        <mark key="'" line="26" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/src/sm/extensions/LifecycleExtension.cpp" timestamp="1497549195366">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/platform/ps3/include/display/PS3DisplayContext.h" timestamp="1499792801704">
        <mark key="'" line="56" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/include/InputDefs.h" timestamp="1497958544165">
        <mark key="'" line="109" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.input/src/util/KeyRepeatManager.cpp" timestamp="1498496788587">
        <mark key="'" line="154" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.devicelayerloader/device-layer-skeleton/interface/include/device/av_input_defs.h" timestamp="1505123660945">
        <mark key="'" line="171" column="0" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.texttospeech/CMakeLists.txt" timestamp="1499699339852">
        <mark key="'" line="97" column="16" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.core/src/plugin/LifecycleEventManager.cpp" timestamp="1501162978602">
        <mark key="'" line="16" column="52" />
      </file>
      <file name="$USER_HOME$/local/depo/src/depo/dependencies/OverridesParser.py" timestamp="1495212547243">
        <mark key="'" line="123" column="32" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/ignite/init.js" timestamp="1518197950295">
        <mark key="'" line="0" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/include/deviceinfo/identity/GeneratedSerialNumberProvider.h" timestamp="1502284831781">
        <mark key="'" line="15" column="15" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.focus.logic/scripts/lua/FocusCalculator.lua" timestamp="1512580325464">
        <mark key="'" line="398" column="24" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/thirdparty/SDL2/cmake/macros.cmake" timestamp="1497022728583">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/duktape_engine.cpp" timestamp="1517248319307">
        <mark key="'" line="71" column="27" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/tests/InputTests.cpp" timestamp="1498747324924">
        <mark key="'" line="94" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/libs/di/include/boost/di.hpp" timestamp="1517322639932">
        <mark key="'" line="1644" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/megablast_roku.h" timestamp="1517246784300">
        <mark key="'" line="161" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/thirdparty/devicepropertiescomponent/amazonite/device-properties/src/DevicePropertiesProvider.cpp" timestamp="1501253193383">
        <mark key="'" line="28" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.lua/src/LuaState.cpp" timestamp="1512644974382">
        <mark key="'" line="192" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/lua_engine.cpp" timestamp="1517253154001">
        <mark key="'" line="2" column="1" />
        <mark key="[" line="75" column="2" />
        <mark key="]" line="75" column="22" />
        <mark key="^" line="75" column="22" />
        <mark key="." line="75" column="22" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/script_engine.cpp" timestamp="1517247283469">
        <mark key="'" line="82" column="42" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/plugin/PluginVersionManager.cpp" timestamp="1513357231106">
        <mark key="'" line="93" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/PoolAllocator.h" timestamp="1512128051021">
        <mark key="'" line="22" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.report/internal/src/report/dispatchers/formatters/DeviceEventFormatter.cpp" timestamp="1497548776245">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/utils/CommandLine.h" timestamp="1511353775443">
        <mark key="'" line="27" column="10" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/utils/StringUtils.h" timestamp="1495104516966">
        <mark key="'" line="19" column="37" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/internal/platform/ps3/include/player/MemoryPoolConfiguration.h" timestamp="1512051811317">
        <mark key="'" line="34" column="34" />
      </file>
      <file name="/usr/include/c++/4.9/ext/atomicity.h" timestamp="1510856196303">
        <mark key="'" line="52" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.texttospeech/internal/platform/android/src/ignition/texttospeech/engine/TextToSpeechEngine.cpp" timestamp="1493736403808">
        <mark key="'" line="184" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/ignition-android/ignition/src/main/java/com/amazon/ignition/IgnitionApplication.java" timestamp="1502117835437">
        <mark key="'" line="57" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/thirdparty/fruit/include/fruit/impl/util/hash_helpers.h" timestamp="1494596531672">
        <mark key="'" line="26" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/ignite/ReactNativeIgnite.js" timestamp="1518445170172">
        <mark key="'" line="54" column="3" />
        <mark key="[" line="123" column="0" />
        <mark key="]" line="123" column="0" />
        <mark key="." line="123" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/Render.cpp" timestamp="1510244136755">
        <mark key="'" line="46" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/thirdparty/kubrick/amp-ps4/apps/AIV/VideoCore/VideoCore.vcxproj" timestamp="1512052391547">
        <mark key="'" line="124" column="3" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.cache/include/cache/MultiLevelCache.h" timestamp="1512659853922">
        <mark key="'" line="37" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/manager/ManagerState.cpp" timestamp="1512645504360">
        <mark key="'" line="54" column="50" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/src/deviceinfo/identity/DefaultDeviceTypeProvider.cpp" timestamp="1511261913681">
        <mark key="'" line="68" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/display/DisplayContext.cpp" timestamp="1499792685709">
        <mark key="'" line="36" column="16" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/devicerpi/implementation/rpi/internal/src/DisplayContext.cpp" timestamp="1498671449324">
        <mark key="'" line="44" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.font/include/font/GlyphAtlas.h" timestamp="1512048391450">
        <mark key="'" line="57" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ci/ci.cmake" timestamp="1499162534335">
        <mark key="'" line="87" column="129" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/requestManager.js" timestamp="1513096014959">
        <mark key="'" line="67" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/lg-ignition/lg/com.amazon.ignition.framework.core/internal/platform/lg/src/luna/NativeAppHandler.cpp" timestamp="1512487632864">
        <mark key="'" line="107" column="23" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelg/implementation/lg/internal/src/SDLDisplayContext.cpp" timestamp="1512484185558">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/local/depo/src/depo/dependencies/Revision.py" timestamp="1495208819203">
        <mark key="'" line="41" column="39" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/thirdparty/gmock/gtest/include/gtest/gtest.h" timestamp="1513074096227">
        <mark key="'" line="1423" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.texttospeech/external/src/ignition/texttospeech/PluginTextToSpeech.cpp" timestamp="1512657178881">
        <mark key="'" line="111" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/websockets/WebSocketDelegate.cpp" timestamp="1517936598697">
        <mark key="'" line="462" column="48" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/src/api/GLES2Api.cpp" timestamp="1507112793361">
        <mark key="'" line="28" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/samsung-ignition/com.amazon.ignition.framework.renderer/internal/platform/samsungtv/cmakescripts/build.cmake" timestamp="1498066000388">
        <mark key="'" line="4" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/src/deviceinfo/services/DefaultPlatformServicesProvider.cpp" timestamp="1493904393781">
        <mark key="'" line="12" column="13" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/internal/src/deviceinfo/identity/DeviceIdentity.cpp" timestamp="1502285644800">
        <mark key="'" line="53" column="50" />
      </file>
      <file name="$USER_HOME$/dev/ig/lg-ignition/lg/com.amazon.ignition.framework.input/internal/platform/lg/src/LGRemoteDelegate.cpp" timestamp="1498149242223">
        <mark key="'" line="88" column="26" />
      </file>
      <file name="$USER_HOME$/local/depo/src/depo/git/GitRepo.py" timestamp="1495212637659">
        <mark key="'" line="32" column="17" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/com.amazon.ignition.framework.player/internal/src/videoPlayer/player/amp/PlayerPlatform.cpp" timestamp="1503658648398">
        <mark key="'" line="148" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/filesystem/FileSystemUtils.cpp" timestamp="1511539486969">
        <mark key="'" line="242" column="30" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.core/internal/platform/android/src/utils/SDLJavaEnvironment.cpp" timestamp="1502117252521">
        <mark key="'" line="40" column="32" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/cmakescripts/create-test-symlink-for-plugin.cmake" timestamp="1506957424045">
        <mark key="'" line="12" column="53" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.animation/tests/CMakeLists.txt" timestamp="1493748473755">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/devicerpi/include_files.txt" timestamp="1498670874660">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/main.cpp" timestamp="1517312974718">
        <mark key="'" line="12" column="46" />
        <mark key="[" line="14" column="34" />
        <mark key="]" line="14" column="41" />
        <mark key="^" line="14" column="41" />
        <mark key="." line="14" column="41" />
      </file>
      <file name="$USER_HOME$/dev/ignite/CMakeLists.txt" timestamp="1516972970315">
        <mark key="'" line="17" column="0" />
        <mark key="[" line="16" column="26" />
        <mark key="]" line="16" column="26" />
        <mark key="^" line="16" column="4" />
        <mark key="." line="16" column="26" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/CMakeLists.txt" timestamp="1512134572708">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/plugin/path/PluginPathResolver.cpp" timestamp="1513090795872">
        <mark key="'" line="37" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/thirdparty/curl/lib/warnless.c" timestamp="1515152749263">
        <mark key="'" line="30" column="3" />
      </file>
      <file name="$USER_HOME$/dev/iglg/devicelg/implementation/lg/internal/include/SDLDisplayContext.h" timestamp="1499197846806">
        <mark key="'" line="39" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/external/include/http/HttpRequest.h" timestamp="1513094402536">
        <mark key="'" line="74" column="39" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/networkUtils.js" timestamp="1513096069172">
        <mark key="'" line="92" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ignite/.gitignore" timestamp="1516988082103">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="4" column="0" />
        <mark key="." line="4" column="0" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.display/device/include/device/av_display.h" timestamp="1499170753214">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/job/FetchPackagesJob.lua" timestamp="1512648287586">
        <mark key="'" line="129" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/manifest.ps4" timestamp="1515147096104">
        <mark key="[" line="21" column="50" />
        <mark key="]" line="21" column="29" />
        <mark key="." line="21" column="51" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/http/factory/HttpResponseConsumerFactory.cpp" timestamp="1513092050014">
        <mark key="'" line="39" column="38" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/manifest.ps3" timestamp="1515147093916">
        <mark key="[" line="21" column="50" />
        <mark key="]" line="21" column="29" />
        <mark key="." line="21" column="51" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/utils/Profiler.h" timestamp="1498128654550">
        <mark key="'" line="16" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.app.stark/scripts/fetchFile.js" timestamp="1513095966869">
        <mark key="'" line="224" column="13" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.animation/include/Animation.h" timestamp="1497535727392">
        <mark key="'" line="29" column="44" />
      </file>
      <file name="/usr/include/c++/4.9/array" timestamp="1513013896579">
        <mark key="'" line="276" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTestRunner.js" timestamp="1518451476696">
        <mark key="[" line="20" column="16" />
        <mark key="]" line="20" column="20" />
        <mark key="^" line="20" column="20" />
        <mark key="." line="20" column="20" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/porting/linux/linux.cpp" timestamp="1516713321084">
        <mark key="'" line="0" column="13" />
      </file>
      <file name="$USER_HOME$/dev/ci/git.cmake" timestamp="1499162312837">
        <mark key="'" line="41" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.cache/include/cache/ICache.h" timestamp="1494001306551">
        <mark key="'" line="15" column="38" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/renderer/Renderer.cpp" timestamp="1499789643859">
        <mark key="'" line="74" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/include/StorageBackend.h" timestamp="1511355305672">
        <mark key="'" line="17" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.scene/include/scene/image/ImageRegistry.h" timestamp="1512057846117">
        <mark key="'" line="100" column="41" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/linux/src/filesystem/LinuxFileSystemFacade.cpp" timestamp="1511279928111">
        <mark key="'" line="260" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ignite/ATVLunarCore/src/js/init.js" timestamp="1518187835446">
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/ps3/cmakescripts/CMakeMacros.cmake" timestamp="1512054133191">
        <mark key="'" line="188" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/workspace/WorkspaceProvisioner.lua" timestamp="1512645602311">
        <mark key="'" line="7" column="40" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/plugin/path/TemplatedPluginPathBuilder.cpp" timestamp="1512036495427">
        <mark key="'" line="88" column="45" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/src/Storage.cpp" timestamp="1512134926503">
        <mark key="'" line="92" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ci/commitment/commitment.cmake" timestamp="1499162490404">
        <mark key="'" line="92" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.cache/src/cache/cacheable/CacheableBuffer.cpp" timestamp="1493896695260">
        <mark key="'" line="183" column="47" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/availability/s4nd/S4NDCandidateRetriever.lua" timestamp="1512647905373">
        <mark key="'" line="73" column="63" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/thirdparty/gmock/gtest/include/gtest/gtest_pred_impl.h" timestamp="1513073878994">
        <mark key="'" line="146" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/resource/texture/TextureLoader.cpp" timestamp="1515081267119">
        <mark key="'" line="427" column="56" />
      </file>
      <file name="$USER_HOME$/dev/ignite/docs/adr/README.md" timestamp="1516988850503">
        <mark key="'" line="47" column="51" />
        <mark key="[" line="13" column="3" />
        <mark key="]" line="13" column="6" />
        <mark key="." line="13" column="6" />
        <mark key="^" line="13" column="6" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.deviceinfo/external/include/deviceinfo/properties/AbstractDeviceProperties.h" timestamp="1511782748251">
        <mark key="'" line="50" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/IHeapAllocator.h" timestamp="1513076232815">
        <mark key="'" line="25" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/src/display/GLES2DisplayContext.cpp" timestamp="1499792664973">
        <mark key="'" line="61" column="27" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/event/EventService.h" timestamp="1497440237449">
        <mark key="'" line="138" column="19" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/platform/thread/posix/Thread.cpp" timestamp="1512048119275">
        <mark key="'" line="499" column="49" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/tests/Library.cpp" timestamp="1497021800229">
        <mark key="'" line="19" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/lua_function_binders.h" timestamp="1516712816265">
        <mark key="'" line="400" column="83" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/perfmetrics/PerformanceMetricsUtil.h" timestamp="1515073285067">
        <mark key="'" line="3" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/include/backends/SecureStorageBackendMigrator.h" timestamp="1512134999238">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/platform/linux/include/curl/curlbuild.h" timestamp="1515152409598">
        <mark key="'" line="60" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/install/plugins/com.amazon.ignition.app.stark/var/web-cache/init.js" timestamp="1503074081198">
        <mark key="'" line="41" column="28823" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTestRunner.js" timestamp="1518451247096">
        <mark key="[" line="19" column="0" />
        <mark key="]" line="19" column="90" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.deviceinfo/internal/include/deviceinfo/properties/DevicePropertiesDelegate.h" timestamp="1501249979048">
        <mark key="'" line="64" column="51" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/include/ota/PluginOTA.h" timestamp="1513696595678">
        <mark key="'" line="41" column="27" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/tests/CMakeLists.txt" timestamp="1506957313813">
        <mark key="'" line="204" column="17" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.deviceinfo/thirdparty/devicepropertiescomponent/amazonite/device-properties/src/DevicePropertiesProvider.cpp" timestamp="1501251410829">
        <mark key="'" line="28" column="40" />
      </file>
      <file name="$USER_HOME$/dev/ig/tools/generate_plugin.sh" timestamp="1495128940748">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/thirdparty/fruit/CMakeLists.txt" timestamp="1494597605010">
        <mark key="'" line="81" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/src/sm/extensions/PluginsExtension.cpp" timestamp="1513090782628">
        <mark key="'" line="108" column="34" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/bindings/sm/WebSocketExtension.cpp" timestamp="1516705872182">
        <mark key="'" line="100" column="56" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.devicelayerloader/device-layer-skeleton/tests/TextToSpeechTest.cpp" timestamp="1493736291751">
        <mark key="'" line="99" column="31" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/include/Storage.h" timestamp="1511355303352">
        <mark key="'" line="65" column="36" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-rpi/com.amazon.ignition.framework.core/internal/platform/rpi/src/plugin/PluginPathPlatform.cpp" timestamp="1502271372175">
        <mark key="'" line="140" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/thirdparty/boost/tools/build/v2/engine/build.sh" timestamp="1496844122638">
        <mark key="'" line="66" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/renderer/OffScreenSceneGraphManager.cpp" timestamp="1509106753802">
        <mark key="'" line="237" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/ps3/src/CustomMalloc.cpp" timestamp="1512127757301">
        <mark key="'" line="121" column="28" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.font/internal/platform/linux/cmakescripts/build.cmake" timestamp="1497968636514">
        <mark key="'" line="7" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/package/PackageInstaller.cpp" timestamp="1513357226666">
        <mark key="'" line="239" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ignite/cmake/websocket.cmake" timestamp="1516973175762">
        <mark key="'" line="13" column="5" />
        <mark key="[" line="13" column="6" />
        <mark key="]" line="13" column="9" />
        <mark key="." line="13" column="9" />
        <mark key="^" line="13" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-panda/com.amazon.ignition.framework.deviceinfo/internal/platform/panda/src/deviceinfo/properties/PlatformDeviceProperties.cpp" timestamp="1499793586646">
        <mark key="'" line="109" column="43" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/tests/Library.h" timestamp="1493982516851">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.devicelayerloader/tests/CMakeLists.txt" timestamp="1495030670803">
        <mark key="'" line="48" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/device/include/device/av_secure_storage_backend.h" timestamp="1511265510668">
        <mark key="'" line="42" column="35" />
      </file>
      <file name="$USER_HOME$/dev/igbuildlg/lg/release/amazonite/lg/platform/device-properties/adaptor/devicepropertiesprovider/include/DevicePropertiesProviderAdapter.h" timestamp="1501251298740">
        <mark key="'" line="19" column="31" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.animation/src/Animation.cpp" timestamp="1497535790047">
        <mark key="'" line="145" column="10" />
      </file>
      <file name="$USER_HOME$/dev/igrpi/com.amazon.ignition.framework.core/CMakeLists.txt" timestamp="1503427317563">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/scripts/lua/job/UpdateCheckJob.lua" timestamp="1512648054981">
        <mark key="'" line="61" column="29" />
      </file>
      <file name="$USER_HOME$/dev/igbuildlg/lg/debug/amazonite/lg/platform/device-properties/implementation/devicepropertiesprovider/lg/include/_lgnc_ls_call.h" timestamp="1499769097058">
        <mark key="'" line="145" column="1" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" timestamp="1518451462403">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="52772" column="11" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-panda/com.amazon.ignition.framework.renderer/internal/platform/panda/cmakescripts/build.cmake" timestamp="1498065991635">
        <mark key="'" line="4" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/PluginJavaScriptConfig.cmake" timestamp="1497535348943">
        <mark key="'" line="149" column="25" />
      </file>
      <file name="$USER_HOME$/dev/hjdocs/broadcom-relation-to-external.puml" timestamp="1517355780565">
        <mark key="'" line="77" column="0" />
        <mark key="[" line="12" column="10" />
        <mark key="]" line="12" column="11" />
        <mark key="." line="12" column="11" />
        <mark key="^" line="11" column="10" />
      </file>
      <file name="/usr/include/c++/4.9/bits/ios_base.h" timestamp="1513092264515">
        <mark key="'" line="364" column="10" />
      </file>
      <file name="$USER_HOME$/dev/ignite/src/megablast_roku.cpp" timestamp="1518182262233">
        <mark key="'" line="1947" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/implementation/linux/internal/include/SecureStorageBackendContext.h" timestamp="1511541912732">
        <mark key="'" line="14" column="10" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.javascript/CMakeLists.txt" timestamp="1502115726659">
        <mark key="'" line="31" column="43" />
      </file>
      <file name="$USER_HOME$/dev/igbuildlg/lg/release/amazonite/lg/platform/device-properties/adaptor/devicepropertiesprovider/src/DevicePropertiesProviderAdapter.cpp" timestamp="1501251293580">
        <mark key="'" line="11" column="0" />
      </file>
      <file name="$USER_HOME$/dev/hjdocs/broadcom-binaries-dependency.puml" timestamp="1517355640043">
        <mark key="'" line="92" column="0" />
        <mark key="[" line="5" column="64" />
        <mark key="]" line="5" column="72" />
        <mark key="." line="5" column="72" />
        <mark key="^" line="5" column="72" />
      </file>
      <file name="$USER_HOME$/dev/ig/ignition-android/com.amazon.ignition.framework.core/internal/platform/android/src/utils/AndroidJniAttachment.cpp" timestamp="1502118320515">
        <mark key="'" line="135" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/ps4/src/SystemInit.cpp" timestamp="1513013583474">
        <mark key="'" line="229" column="37" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/tests/DisplayTests.cpp" timestamp="1502462627009">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/backend/gles2/src/api/GLES2CubeTexture.cpp" timestamp="1494605209507">
        <mark key="'" line="67" column="32" />
      </file>
      <file name="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/src/main.c" timestamp="1518181872216">
        <mark key="'" line="172" column="20" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.texttospeech/internal/platform/ps4/src/ignition/texttospeech/engine/TextToSpeechEngine.cpp" timestamp="1493736340568">
        <mark key="'" line="75" column="9" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.display/internal/include/display/DisplayDeviceLayerData.h" timestamp="1506619965112">
        <mark key="'" line="17" column="45" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/manifest.ps3" timestamp="1512052319814">
        <mark key="'" line="21" column="29" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.player/manifest.ps4" timestamp="1512052308638">
        <mark key="'" line="21" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ignite/tools/generate_project.py" timestamp="1509725245499">
        <mark key="'" line="60" column="41" />
      </file>
      <file name="$USER_HOME$/dev/ig/devicelinux/interface/include/device/av_display_defs.h" timestamp="1512487770262">
        <mark key="'" line="43" column="2" />
      </file>
      <file name="$USER_HOME$/dev/ig/lg-ignition/lg/com.amazon.ignition.framework.deviceinfo/internal/platform/lg/src/deviceinfo/properties/LGDevicePropertiesProvider.cpp" timestamp="1499793887623">
        <mark key="'" line="113" column="46" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/errors/CrashDataMap.h" timestamp="1513013323066">
        <mark key="'" line="45" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/package/PayloadMetadata.cpp" timestamp="1512650562951">
        <mark key="'" line="99" column="21" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/api/Texture.cpp" timestamp="1512643582909">
        <mark key="'" line="316" column="8" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.texttospeech/internal/include/ignition/texttospeech/engine/ThreadSafeTextNarrator.h" timestamp="1499699383465">
        <mark key="'" line="59" column="16" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/CMakeLists.txt" timestamp="1499092408811">
        <mark key="'" line="651" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.devicelayerloader/internal/src/devicelayerloader/PluginDummyDeviceLayerLoader.cpp" timestamp="1493718092022">
        <mark key="'" line="32" column="95" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/internal/platform/linux/src/allocation/AllocWrapperFunctions.cpp" timestamp="1513076231352">
        <mark key="'" line="54" column="33" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/cppcompatibility/std/Atomic.h" timestamp="1510833583878">
        <mark key="'" line="12" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/include/ota/manager/ManagerState.h" timestamp="1512645469682">
        <mark key="'" line="39" column="17" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/include/allocation/memory/IHighAllocator.h" timestamp="1512051939753">
        <mark key="'" line="22" column="24" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.ota/internal/src/ota/bindings/lua/ffi/PackageInstallerFactoryLuaBinding.cpp" timestamp="1512648453590">
        <mark key="'" line="15" column="18" />
      </file>
      <file name="/connect.c" timestamp="1515160224417">
        <mark key="'" line="1082" column="24" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/plugin/LifecycleEventManager.cpp" timestamp="1512487548168">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.storage/include/backends/DeviceLayerData.h" timestamp="1511960281909">
        <mark key="'" line="38" column="4" />
      </file>
      <file name="$USER_HOME$/dev/ci/VersionsParser.cmake" timestamp="1499159724857">
        <mark key="'" line="4" column="7" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.cache/src/cache/MultiLevelCache.cpp" timestamp="1512644095417">
        <mark key="'" line="59" column="8" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/PluginRenderer.cpp" timestamp="1515080928109">
        <mark key="'" line="819" column="25" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.core/src/allocation/memory/PoolAllocatorAdapter.cpp" timestamp="1512128280038">
        <mark key="'" line="74" column="22" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.display/external/include/IDisplay.h" timestamp="1499248385720">
        <mark key="'" line="30" column="18" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.renderer/internal/src/materials/TexturedMaterial.cpp" timestamp="1515081122892">
        <mark key="'" line="152" column="13" />
      </file>
      <file name="$USER_HOME$/dev/ig/com.amazon.ignition.framework.network/internal/src/crypto/CertConfiguration.cpp" timestamp="1502117561335">
        <mark key="'" line="77" column="12" />
      </file>
      <file name="$USER_HOME$/dev/iglg/com.amazon.ignition.framework.core/cmakescripts/create-monolith.cmake" timestamp="1503663069607">
        <mark key="'" line="82" column="20" />
      </file>
    </filemarks>
    <jumps>
      <jump line="46904" column="34" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTestRunner.js" />
      <jump line="46906" column="21" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTestRunner.js" />
      <jump line="52144" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="47126" column="15" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="47125" column="17" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="47031" column="9" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46912" column="27" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46887" column="62" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46885" column="38" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46884" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46882" column="24" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46881" column="4" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46492" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="43791" column="8" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="0" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="43759" column="57" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="43760" column="42" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46489" column="7" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="46493" column="122" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="47010" column="10" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="1306" column="6" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="466" column="37" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="99" column="3" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="113" column="3" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="88" column="3" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="197" column="4" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/ignite/ReactNativeIgnite.js" />
      <jump line="54" column="3" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/ignite/ReactNativeIgnite.js" />
      <jump line="73" column="18" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="0" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="326" column="8" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="322" column="4" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="481" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="507" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="374" column="36" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="467" column="40" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="470" column="30" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="324" column="9" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="348" column="42" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="359" column="39" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="333" column="17" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/web/ReactNativeWeb.js" />
      <jump line="47013" column="15" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="94" column="29" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="43688" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="52" column="47" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="116" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52561" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="3154" column="41" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="2376" column="10" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1418" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1402" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1408" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="15" column="6" filename="$USER_HOME$/dev/ignite/TextTest/node_modules/react-native/local-cli/templates/HelloNavigation/App.js" />
      <jump line="5" column="46" filename="$USER_HOME$/dev/ignite/TextTest/index.embedded.js" />
      <jump line="1" column="11" filename="$USER_HOME$/dev/ignite/TextTest/index.embedded.js" />
      <jump line="1413" column="4" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52612" column="51" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52687" column="21" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52686" column="13" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52720" column="21" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52715" column="21" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52714" column="13" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52718" column="4" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52604" column="13" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52605" column="40" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52606" column="98" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52609" column="29" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52640" column="21" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52665" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52668" column="20" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52669" column="26" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1404" column="6" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1406" column="6" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52090" column="29" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="52121" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="52124" column="18" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="52140" column="15" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="1225" column="7" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="1233" column="16" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="1240" column="13" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="23053" column="63" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/SimpleTest.js" />
      <jump line="1412" column="11" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="6" column="14" filename="$USER_HOME$/dev/ignite/TextTest/index.embedded.js" />
      <jump line="52673" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1399" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1821" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1420" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="2705" column="47" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="1467" column="36" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="8" column="24" filename="$USER_HOME$/dev/ignite/TextTest/index.embedded.js" />
      <jump line="20" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTestRunner.js" />
      <jump line="1419" column="2" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52773" column="0" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="52772" column="12" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
      <jump line="129" column="37" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTestRunner.js" />
      <jump line="1786" column="16" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTestRunner.js" />
      <jump line="1787" column="52" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTestRunner.js" />
      <jump line="43562" column="36" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTestRunner.js" />
      <jump line="11460" column="19" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTestRunner.js" />
      <jump line="18" column="15" filename="$USER_HOME$/dev/ignite/AlexaReactNativeRuntimePrototype/js/apps/TextTest.js" />
    </jumps>
    <registers>
      <register name="a" type="2">
        <text encoding="base64">Ly8hIEBkZWZncm91cCBkaXNwbGF5IERpc3BsYXkKLy8hIEBpbmdyb3VwIGlkbAovLyEgQHsKCg==</text>
      </register>
      <register name="&quot;" type="4">
        <text>true</text>
      </register>
      <register name="b" type="2">
        <text encoding="base64">Ly8hIEB9Cg==</text>
      </register>
      <register name="f" type="2">
        <text encoding="base64">CXZpcnR1YWwgdm9pZCBzZXRJbkJhY2tncm91bmRNb2RlKCkgb3ZlcnJpZGU7Cgl2aXJ0dWFsIHZvaWQgc2V0SW5Gb3JlZ3JvdW5kTW9kZSgpIG92ZXJyaWRlOwo=</text>
      </register>
      <register name="g" type="4">
        <text>DEVICE_PROPERTIES_PROVIDER_LOCATION</text>
      </register>
      <register name="k" type="2">
        <text encoding="base64">CWxvZ0xpc3RlbmVyLnJlc2V0KG5ldyBMb2dMaXN0ZW5lcigKCQkJbW9ja0NvbnRleHQsIG1vY2tNZXNzYWdlQnVmZmVyLAoJCQljb3JlOjptZW1vcnk6OlVuaXF1ZVB0cjxJRXZlbnRCbGFja2xpc3RNYW5hZ2VyPihibGFja2xpc3RNYW5hZ2VyKSkpOwoJTG9nOjpnZXQoKS5yZWdpc3Rlckxpc3RlbmVyKGNvcmU6Om1lbW9yeTo6V2Vha1B0cjxJTG9nTGlzdGVuZXI+IHtsb2dMaXN0ZW5lcn0pOwo=</text>
      </register>
      <register name="l" type="4">
        <keys>
          <key char="99" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="76" code="0" mods="0" />
          <key char="68" code="0" mods="0" />
          <key char="69" code="0" mods="0" />
          <key char="86" code="0" mods="0" />
          <key char="73" code="0" mods="0" />
          <key char="67" code="0" mods="0" />
          <key char="69" code="0" mods="0" />
          <key char="76" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="89" code="0" mods="0" />
          <key char="69" code="0" mods="0" />
          <key char="82" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="-" type="4">
        <text>true</text>
      </register>
      <register name="m" type="4">
        <keys>
          <key char="121" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="80" code="0" mods="0" />
          <key char="87" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="87" code="0" mods="0" />
          <key char="64" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="60" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="62" code="0" mods="0" />
          <key char="77" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="60" code="0" mods="0" />
          <key char="47" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="62" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxfX1JDVFByb2ZpbGVJc1Byb2ZpbGluZ1w+</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgIGV2YWwoTmF0aXZlLlJlYWRGaWxlKCcuLi8uLi9UZXh0VGVzdC9kaXN0L1RleHRUZXN0LmpzJykpOwo=</text>
      </register>
      <register name="q" type="4">
        <keys>
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
        </keys>
      </register>
      <register name="2" type="2">
        <text encoding="base64">aW1wb3J0IFJlYWN0LCB7IEFwcFJlZ2lzdHJ5IH0gZnJvbSAncmVhY3QtbmF0aXZlJzsKaW1wb3J0IEFwcCBmcm9tICcuL0FwcCcK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">aW1wb3J0IFJlYWN0LCB7IEFwcFJlZ2lzdHJ5IH0gZnJvbSAncmVhY3QtbmF0aXZlJzsKaW1wb3J0IEFwcCBmcm9tICcuL0FwcCcK</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgIGltcG9ydCBSZWFjdCwgeyBBcHBSZWdpc3RyeSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7CiAgICBpbXBvcnQgQXBwIGZyb20gJy4vQXBwJwo=</text>
      </register>
      <register name="t" type="2">
        <text encoding="base64">CnN0cnVjdCBNb2NrTG9nTGlzdGVuZXIgOiBwdWJsaWMgSUxvZ0xpc3RlbmVyCnsKCU1PQ0tfTUVUSE9EMShsaXN0ZW5Ub01lc3NhZ2UsIHZvaWQoY29uc3QgSUxvZ0xpc3RlbmVyOjpMb2dNZXNzYWdlJikpOwoJTU9DS19NRVRIT0QwKHByb2Nlc3NNZXNzYWdlcywgdm9pZCgpKTsKCU1PQ0tfTUVUSE9EMShmbHVzaE1lc3NhZ2VzLCB2b2lkKGNvbnN0IElMb2dMaXN0ZW5lcjo6Rmx1c2hPcHRpb24pKTsKfTsKClRFU1RfRihMb2dUZXN0LCBsaXN0ZW5Ub01lc3NhZ2VfY2FuQ2FsbExvZykKewoJYXV0byBsaXN0ZW5lciA9IGNvcmU6Om1lbW9yeTo6bWFrZV9zaGFyZWQ8TW9ja0xvZ0xpc3RlbmVyPigpOwoJRVhQRUNUX0NBTEwoKmxpc3RlbmVyLCBsaXN0ZW5Ub01lc3NhZ2UoXykpCgkJCS5XaWxsT25jZSgKCQkJCQlJbnZva2VXaXRob3V0QXJncygKCQkJCQkJCVt0aGlzXSgpCgkJCQkJCQl7CgkJCQkJCQkJTG9nOjpnZXQoKS5kZWJ1ZygKCQkJCQkJCQkJCXRlc3RDaGFubmVsSWQsCgkJCQkJCQkJCQkiQ2FsbGluZyBsb2cgZnJvbSBsb2cgbGlzdGVuZXIiKTsKCQkJCQkJCX0pKTsKCglMb2c6OmdldCgpLnJlZ2lzdGVyTGlzdGVuZXIobGlzdGVuZXIuZ2V0KCkpOwoJTG9nOjpnZXQoKS5kZWJ1Zyh0ZXN0Q2hhbm5lbElkLCAibG9nZ2luZyBhIGRlYnVnIG1lc3NhZ2UiKTsKCUxvZzo6Z2V0KCkudW5yZWdpc3Rlckxpc3RlbmVyKGxpc3RlbmVyLmdldCgpKTsKfQoKVEVTVF9GKExvZ1Rlc3QsIHByb2Nlc3NNZXNzYWdlc19jYW5DYWxsTG9nKQp7CglhdXRvIGxpc3RlbmVyID0gY29yZTo6bWVtb3J5OjptYWtlX3NoYXJlZDxNb2NrTG9nTGlzdGVuZXI+KCk7CglFWFBFQ1RfQ0FMTCgqbGlzdGVuZXIsIHByb2Nlc3NNZXNzYWdlcygpKQoJCQkuV2lsbE9uY2UoCgkJCQkJSW52b2tlV2l0aG91dEFyZ3MoCgkJCQkJCQlbdGhpc10oKQoJCQkJCQkJewoJCQkJCQkJCUxvZzo6Z2V0KCkuZGVidWcoCgkJCQkJCQkJCQl0ZXN0Q2hhbm5lbElkLAoJCQkJCQkJCQkJIkNhbGxpbmcgbG9nIGZyb20gbG9nIGxpc3RlbmVyIik7CgkJCQkJCQl9KSk7CgoJTG9nOjpnZXQoKS5yZWdpc3Rlckxpc3RlbmVyKGxpc3RlbmVyLmdldCgpKTsKCUxvZzo6Z2V0KCkuZGVidWcodGVzdENoYW5uZWxJZCwgImxvZ2dpbmcgYSBkZWJ1ZyBtZXNzYWdlIik7CglsaXN0ZW5lci0+cHJvY2Vzc01lc3NhZ2VzKCk7CglMb2c6OmdldCgpLnVucmVnaXN0ZXJMaXN0ZW5lcihsaXN0ZW5lci5nZXQoKSk7Cn0KClRFU1RfRihMb2dUZXN0LCBmbHVzaF9jYW5DYWxsTG9nKQp7CglhdXRvIGxpc3RlbmVyID0gY29yZTo6bWVtb3J5OjptYWtlX3NoYXJlZDxNb2NrTG9nTGlzdGVuZXI+KCk7CglFWFBFQ1RfQ0FMTCgqbGlzdGVuZXIsIGZsdXNoTWVzc2FnZXMoXykpCgkJCS5XaWxsT25jZSgKCQkJCQlJbnZva2VXaXRob3V0QXJncygKCQkJCQkJCVt0aGlzXSgpCgkJCQkJCQl7CgkJCQkJCQkJTG9nOjpnZXQoKS5kZWJ1ZygKCQkJCQkJCQkJCXRlc3RDaGFubmVsSWQsCgkJCQkJCQkJCQkiQ2FsbGluZyBsb2cgZnJvbSBsb2cgbGlzdGVuZXIiKTsKCQkJCQkJCX0pKTsKCglMb2c6OmdldCgpLnJlZ2lzdGVyTGlzdGVuZXIobGlzdGVuZXIuZ2V0KCkpOwoJTG9nOjpnZXQoKS5kZWJ1Zyh0ZXN0Q2hhbm5lbElkLCAibG9nZ2luZyBhIGRlYnVnIG1lc3NhZ2UiKTsKCUxvZzo6Z2V0KCkuZmx1c2goKTsKCUxvZzo6Z2V0KCkudW5yZWdpc3Rlckxpc3RlbmVyKGxpc3RlbmVyLmdldCgpKTsKfQo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2xvYWRNb2R1bGVJbXBsZW1lbnRhdGlvbjonICsgSlNPTi5zdHJpbmdpZnkobG9hZE1vZHVsZUltcGxlbWVudGF0aW9uKSk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdtb2R1bGVJZDonICsgSlNPTi5zdHJpbmdpZnkobW9kdWxlSWQpKTsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ21vZHVsZS52ZXJib3NlTmFtZTogJyArIG1vZHVsZS52ZXJib3NlTmFtZSk7Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAgICAgY29uc29sZS53YXJuKCdtb2R1bGUudmVyYm9zZU5hbWU6ICcgKyBtb2R1bGUudmVyYm9zZU5hbWUpOwo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ21vZHVsZS46JyArIEpTT04uc3RyaW5naWZ5KG1vZHVsZUlkKSk7Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ21vZHVsZUlkOicgKyBKU09OLnN0cmluZ2lmeShtb2R1bGVJZCkpOwo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICBjb25zb2xlLndhcm4oJ21vZHVsZUlkOiAnICsgSlNPTi5zdHJpbmdpZnkobW9kdWxlSWQpKTsK</text>
      </register>
      <register name="y" type="2">
        <text encoding="base64">CiMgTG9hZCBkZXZpY2UgbGF5ZXIgbGlicmFyeSBhbmQgdXNlIGRldmljZSBBUElzIGZyb20gaXQKQ01BS0VfT1BUSU9OUz0iJENNQUtFX09QVElPTlMgLURVU0VfREVWSUNFX0xBWUVSPVlFUyIKCiMgVXNlIERQQyB0byBnZXQgaW5mb3JtYXRpb24gZnJvbSBkZXZpY2VzLgpDTUFLRV9PUFRJT05TPSIkQ01BS0VfT1BUSU9OUyAtRFVTRV9ERVZJQ0VfUFJPUEVSVElFU19DT01QT05FTlQ9WUVTIgpDTUFLRV9PUFRJT05TPSIkQ01BS0VfT1BUSU9OUyAtRERFVklDRV9QUk9QRVJUSUVTX1BST1ZJREVSX0xPQ0FUSU9OPSQiCg==</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxfX1JDVFByb2ZpbGVJc1Byb2ZpbGluZ1w+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxfX1JDVFByb2ZpbGVJc1Byb2ZpbGluZ1w+</last-pattern>
      <last-replace />
      <last-substitute encoding="base64">XDxBcHBcPg==</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxTY3JvbGxWaWV3XD4=</entry>
        <entry>return</entry>
        <entry encoding="base64">XDxyZXR1cm5cPg==</entry>
        <entry encoding="base64">XDxjb2xvckFzU3RyaW5nXD4=</entry>
        <entry>IGNITE</entry>
        <entry encoding="base64">XDxpbXBvcnRcPg==</entry>
        <entry encoding="base64">XDxNeUFwcFw+</entry>
        <entry encoding="base64">XDxOQVRJVkVfY3JlYXRlVmlld1w+</entry>
        <entry encoding="base64">XDxOQVRJVkVfY3JlYXRlUmF3VGV4dFw+</entry>
        <entry>Open up</entry>
        <entry encoding="base64">XDxBcHBcPg==</entry>
        <entry encoding="base64">XDxfQXBwXD4=</entry>
        <entry encoding="base64">XDxfQXBwMlw+</entry>
        <entry encoding="base64">XDxTaW1wbGVUZXN0XD4=</entry>
        <entry encoding="base64">XDxzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3NcPg==</entry>
        <entry encoding="base64">XDxfX2RcPg==</entry>
        <entry encoding="base64">XDwxMVw+</entry>
        <entry>YellowBox</entry>
        <entry encoding="base64">XDxZZWxsb3dCb3hcPg==</entry>
        <entry encoding="base64">XDxfX1JDVFByb2ZpbGVJc1Byb2ZpbGluZ1w+</entry>
      </history-search>
      <history-cmd>
        <entry>wq</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXHxyZXN1bHRcKS9cMTIvcw==</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXHxyZXN1bHRcKS9cMSAyL3M=</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjfHJlc3VsdFwpL1wxMi9z</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXCkvXDEgMi9z</entry>
        <entry encoding="base64">JzwsJz5zLyhzcmMpL1wxIDIvcw==</entry>
        <entry encoding="base64">JzwsJz5zL3NyYy9zcmMyL3M=</entry>
        <entry encoding="base64">JzwsJz5zL3NyYy9zcmMyL2c=</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjfHJlc3VsdFwpL1wxMi9n</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXCkvc3JjMi9n</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXCkvXDEyL2c=</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXHxyZXN1bHRcKS9cMTIvZw==</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXHxyZXN1bHRcKS9cMTMvZw==</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXHxyZXN1bHRcKS9cMTQvZw==</entry>
        <entry encoding="base64">JzwsJz5zL1woc3JjXHxyZXN1bHRcKS9cMTUvZw==</entry>
        <entry>%s/&quot;/'/g</entry>
        <entry>g/develop/d</entry>
        <entry encoding="base64">JXMvXDxMSU5VWF8vL2c=</entry>
        <entry>buf</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>